// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExpoStaff {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
}

model WorkshopStaff {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique

  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId String   @db.Uuid
}

model Visitor {
  id                   String  @id @default(uuid()) @db.Uuid
  email                String  @unique
  sixDigitCode         String  @unique
  name                 String
  surname              String
  gender               String
  phone                String
  category             String
  visitDate            String
  interestedActivities String?
  referralSource       String?
  studentLevel         String?
  studyStream          String?
  school               String?
  province             String?
  interestLevel        String?
  interestedField      String?
  emergencyContact     String?
  universityYear       String?
  faculty              String?
  university           String?
  alumniBatch          String?
  teacherSchool        String?
  teacherProvince      String?
  subjectTaught        String?
}

model Building {
  id     String   @id @default(uuid()) @db.Uuid
  name   String   @unique
  slug   String?
  images String[]
  floors Floor[]
}

model Floor {
  id    String  @id @default(uuid()) @db.Uuid
  name  String  @unique
  slug  String?
  rooms Room[]

  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId String   @db.Uuid
}

model Room {
  id    String  @id @default(uuid()) @db.Uuid
  name  String  @unique
  event String?
  body  String?

  floor   Floor  @relation(fields: [floorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  floorId String @db.Uuid
}

model IntaniaLocation {
  id       String  @id @default(uuid()) @db.Uuid
  room     String?
  floor    String?
  building String

  // not needed
  event    Event[]
  workshop Workshop[]
}

model Event {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique
  body      String?
  startTime DateTime?
  endTime   DateTime?
  tags      EventTag[]
  picture   String?

  intaniaLocation   IntaniaLocation? @relation(fields: [intaniaLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  intaniaLocationId String?          @db.Uuid
}

model EventTag {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  // not needed
  events Event[]
}

model Workshop {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  workshopSlots WorkshopSlot[]

  intaniaLocation   IntaniaLocation? @relation(fields: [intaniaLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  intaniaLocationId String?          @db.Uuid

  // not needed
  workshopStaff WorkshopStaff[]
}

model WorkshopSlot {
  id                     String   @id @default(uuid()) @db.Uuid
  startTime              DateTime
  endTime                DateTime
  currentRegistrantCount Int
  maxRegistrantCount     Int?

  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId String   @db.Uuid
}

model Competition {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
}

model Major {
  id          String @id @default(uuid()) @db.Uuid
  description String @unique
}
